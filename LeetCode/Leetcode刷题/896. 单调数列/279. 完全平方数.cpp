///********************************************************************
//1. 题目来源：https://leetcode-cn.com/problems/perfect-squares/
//
//2. 原题
//279. 完全平方数
//给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
//
//给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
//
//完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
//
//示例 1：
//
//输入：n = 12
//输出：3
//解释：12 = 4 + 4 + 4
//示例 2：
//
//输入：n = 13
//输出：2
//解释：13 = 4 + 9
//
//提示：
//
//1 <= n <= 104
//
//3. 归类：动态规划
//4. 解题要点：
//dp[n]代表最小值
//从1到根号n进行枚举，能取的最合适的数一定在里面，减去之后继续枚举，符合动态规划
//dp[i]=min(dp[i-j^2])+1
//dp[0]=0
//
//**********************************************************************/
//
///*************************头文件*****************************/
//#include <iostream>
//#include <vector>
//#include <set>
//#include <algorithm>
//#include <stack>
//#include <map>
//using namespace std;
//
///*************************实现函数*****************************/
//class Solution {
//public:
//	int numSquares(int n) {
//		vector<int> dp(n+1);
//		dp[0] = 0;
//		for (int i = 1; i <= n; i++)
//		{
//			int min = INT_MAX;
//			for (int j = 1; j*j <= i ; j++)
//			{
//				if (min > dp[i - j * j])
//					min = dp[i - j * j];
//			}
//			dp[i] = min + 1;
//		}
//		return dp[n];
//	}
//};
///*************************main函数 输入输出*****************************/
//int main() {
//	int n = 12;
//	Solution S;
//	cout<<S.numSquares(n)<<endl;
//
//	system("pause");
//	return 0;
//}