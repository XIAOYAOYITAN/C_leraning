///********************************************************************
//1. 题目来源：https://leetcode-cn.com/problems/coin-change/
//
//2. 原题
//322. 零钱兑换
//给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
//
//你可以认为每种硬币的数量是无限的。
//
//示例 1：
//输入：coins = [1, 2, 5], amount = 11
//输出：3
//解释：11 = 5 + 5 + 1
//示例 2：
//
//输入：coins = [2], amount = 3
//输出：-1
//示例 3：
//
//输入：coins = [1], amount = 0
//输出：0
//示例 4：
//
//输入：coins = [1], amount = 1
//输出：1
//示例 5：
//
//输入：coins = [1], amount = 2
//输出：2
//
//3. 归类：贪心，DFS
//
//4. 解题要点：要求凑成的硬币数量最少，所以面额大的硬币要尽量多，先试试用最大的硬币可不可以，不行再换小的
//
//**********************************************************************/
//
///*************************头文件*****************************/
//#include <iostream>
//#include <vector>
//#include <set>
//#include <algorithm>
//#include <stack>
//#include <map>
//using namespace std;
//
///*************************实现函数*****************************/
//class Solution {
//public:
//	int coinChange(vector<int>& coins, int amount) {
//		sort(coins.begin(), coins.end());
//		int n = coins.size();
//		int num = n-1;
//		int count=0;
//		charge(coins, amount,num,count);
//
//
//
//
//	}
//	bool charge(vector<int>& coins, int amount,int num,int count)
//	{
//		if (amount - coins[num] == 0) return true;
//		else if (amount - coins[num] < 0) return false;
//		else
//		{
//			if (charge(coins, amount - coins[num], num, count++))  return true;
//			else
//			{
//				num--;
//				charge(coins, amount - coins[num], num, count);
//			}
//		}
//	}
//};
//
///*************************main函数 输入输出*****************************/
//int main() {
//
//	system("pause");
//	return 0;
//}